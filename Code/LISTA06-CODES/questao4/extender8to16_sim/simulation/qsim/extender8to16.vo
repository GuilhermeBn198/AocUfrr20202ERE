// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "03/22/2021 20:33:16"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module extender8to16 (
	in_port,
	out_port);
input 	[7:0] in_port;
output 	[15:0] out_port;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \out_port[0]~output_o ;
wire \out_port[1]~output_o ;
wire \out_port[2]~output_o ;
wire \out_port[3]~output_o ;
wire \out_port[4]~output_o ;
wire \out_port[5]~output_o ;
wire \out_port[6]~output_o ;
wire \out_port[7]~output_o ;
wire \out_port[8]~output_o ;
wire \out_port[9]~output_o ;
wire \out_port[10]~output_o ;
wire \out_port[11]~output_o ;
wire \out_port[12]~output_o ;
wire \out_port[13]~output_o ;
wire \out_port[14]~output_o ;
wire \out_port[15]~output_o ;
wire \in_port[0]~input_o ;
wire \in_port[1]~input_o ;
wire \in_port[2]~input_o ;
wire \in_port[3]~input_o ;
wire \in_port[4]~input_o ;
wire \in_port[5]~input_o ;
wire \in_port[6]~input_o ;
wire \in_port[7]~input_o ;


cyclonev_io_obuf \out_port[0]~output (
	.i(\in_port[0]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[0]~output .bus_hold = "false";
defparam \out_port[0]~output .open_drain_output = "false";
defparam \out_port[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[1]~output (
	.i(\in_port[1]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[1]~output .bus_hold = "false";
defparam \out_port[1]~output .open_drain_output = "false";
defparam \out_port[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[2]~output (
	.i(\in_port[2]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[2]~output .bus_hold = "false";
defparam \out_port[2]~output .open_drain_output = "false";
defparam \out_port[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[3]~output (
	.i(\in_port[3]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[3]~output .bus_hold = "false";
defparam \out_port[3]~output .open_drain_output = "false";
defparam \out_port[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[4]~output (
	.i(\in_port[4]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[4]~output .bus_hold = "false";
defparam \out_port[4]~output .open_drain_output = "false";
defparam \out_port[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[5]~output (
	.i(\in_port[5]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[5]~output .bus_hold = "false";
defparam \out_port[5]~output .open_drain_output = "false";
defparam \out_port[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[6]~output (
	.i(\in_port[6]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[6]~output .bus_hold = "false";
defparam \out_port[6]~output .open_drain_output = "false";
defparam \out_port[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[7]~output (
	.i(\in_port[7]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[7]~output .bus_hold = "false";
defparam \out_port[7]~output .open_drain_output = "false";
defparam \out_port[7]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[8]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[8]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[8]~output .bus_hold = "false";
defparam \out_port[8]~output .open_drain_output = "false";
defparam \out_port[8]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[9]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[9]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[9]~output .bus_hold = "false";
defparam \out_port[9]~output .open_drain_output = "false";
defparam \out_port[9]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[10]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[10]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[10]~output .bus_hold = "false";
defparam \out_port[10]~output .open_drain_output = "false";
defparam \out_port[10]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[11]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[11]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[11]~output .bus_hold = "false";
defparam \out_port[11]~output .open_drain_output = "false";
defparam \out_port[11]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[12]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[12]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[12]~output .bus_hold = "false";
defparam \out_port[12]~output .open_drain_output = "false";
defparam \out_port[12]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[13]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[13]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[13]~output .bus_hold = "false";
defparam \out_port[13]~output .open_drain_output = "false";
defparam \out_port[13]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[14]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[14]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[14]~output .bus_hold = "false";
defparam \out_port[14]~output .open_drain_output = "false";
defparam \out_port[14]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_port[15]~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_port[15]~output_o ),
	.obar());
// synopsys translate_off
defparam \out_port[15]~output .bus_hold = "false";
defparam \out_port[15]~output .open_drain_output = "false";
defparam \out_port[15]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \in_port[0]~input (
	.i(in_port[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[0]~input_o ));
// synopsys translate_off
defparam \in_port[0]~input .bus_hold = "false";
defparam \in_port[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[1]~input (
	.i(in_port[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[1]~input_o ));
// synopsys translate_off
defparam \in_port[1]~input .bus_hold = "false";
defparam \in_port[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[2]~input (
	.i(in_port[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[2]~input_o ));
// synopsys translate_off
defparam \in_port[2]~input .bus_hold = "false";
defparam \in_port[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[3]~input (
	.i(in_port[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[3]~input_o ));
// synopsys translate_off
defparam \in_port[3]~input .bus_hold = "false";
defparam \in_port[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[4]~input (
	.i(in_port[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[4]~input_o ));
// synopsys translate_off
defparam \in_port[4]~input .bus_hold = "false";
defparam \in_port[4]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[5]~input (
	.i(in_port[5]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[5]~input_o ));
// synopsys translate_off
defparam \in_port[5]~input .bus_hold = "false";
defparam \in_port[5]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[6]~input (
	.i(in_port[6]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[6]~input_o ));
// synopsys translate_off
defparam \in_port[6]~input .bus_hold = "false";
defparam \in_port[6]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \in_port[7]~input (
	.i(in_port[7]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\in_port[7]~input_o ));
// synopsys translate_off
defparam \in_port[7]~input .bus_hold = "false";
defparam \in_port[7]~input .simulate_z_as = "z";
// synopsys translate_on

assign out_port[0] = \out_port[0]~output_o ;

assign out_port[1] = \out_port[1]~output_o ;

assign out_port[2] = \out_port[2]~output_o ;

assign out_port[3] = \out_port[3]~output_o ;

assign out_port[4] = \out_port[4]~output_o ;

assign out_port[5] = \out_port[5]~output_o ;

assign out_port[6] = \out_port[6]~output_o ;

assign out_port[7] = \out_port[7]~output_o ;

assign out_port[8] = \out_port[8]~output_o ;

assign out_port[9] = \out_port[9]~output_o ;

assign out_port[10] = \out_port[10]~output_o ;

assign out_port[11] = \out_port[11]~output_o ;

assign out_port[12] = \out_port[12]~output_o ;

assign out_port[13] = \out_port[13]~output_o ;

assign out_port[14] = \out_port[14]~output_o ;

assign out_port[15] = \out_port[15]~output_o ;

endmodule
