// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2021 17:57:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          somador16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module somador16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in_portA;
reg [15:0] in_portB;
// wires                                               
wire [15:0] out_port;

// assign statements (if any)                          
somador16 i1 (
// port map - connection between master ports and signals/registers   
	.in_portA(in_portA),
	.in_portB(in_portB),
	.out_port(out_port)
);
initial 
begin 
#1000000 $finish;
end 
// in_portA[ 15 ]
initial
begin
	in_portA[15] = 1'b0;
end 
// in_portA[ 14 ]
initial
begin
	in_portA[14] = 1'b0;
end 
// in_portA[ 13 ]
initial
begin
	in_portA[13] = 1'b0;
end 
// in_portA[ 12 ]
initial
begin
	in_portA[12] = 1'b0;
end 
// in_portA[ 11 ]
initial
begin
	in_portA[11] = 1'b0;
end 
// in_portA[ 10 ]
initial
begin
	in_portA[10] = 1'b0;
end 
// in_portA[ 9 ]
initial
begin
	in_portA[9] = 1'b0;
end 
// in_portA[ 8 ]
initial
begin
	in_portA[8] = 1'b0;
end 
// in_portA[ 7 ]
initial
begin
	in_portA[7] = 1'b0;
end 
// in_portA[ 6 ]
initial
begin
	in_portA[6] = 1'b0;
end 
// in_portA[ 5 ]
initial
begin
	in_portA[5] = 1'b0;
end 
// in_portA[ 4 ]
initial
begin
	in_portA[4] = 1'b0;
end 
// in_portA[ 3 ]
initial
begin
	in_portA[3] = 1'b0;
	in_portA[3] = #600000 1'b1;
end 
// in_portA[ 2 ]
initial
begin
	in_portA[2] = 1'b0;
	in_portA[2] = #300000 1'b1;
	in_portA[2] = #300000 1'b0;
	in_portA[2] = #300000 1'b1;
end 
// in_portA[ 1 ]
initial
begin
	repeat(3)
	begin
		in_portA[1] = 1'b0;
		in_portA[1] = #150000 1'b1;
		# 150000;
	end
	in_portA[1] = 1'b0;
end 
// in_portA[ 0 ]
initial
begin
	repeat(6)
	begin
		in_portA[0] = 1'b0;
		in_portA[0] = #75000 1'b1;
		# 75000;
	end
	in_portA[0] = 1'b0;
	in_portA[0] = #75000 1'b1;
end 
// in_portB[ 15 ]
initial
begin
	in_portB[15] = 1'b0;
end 
// in_portB[ 14 ]
initial
begin
	in_portB[14] = 1'b0;
end 
// in_portB[ 13 ]
initial
begin
	in_portB[13] = 1'b0;
end 
// in_portB[ 12 ]
initial
begin
	in_portB[12] = 1'b0;
end 
// in_portB[ 11 ]
initial
begin
	in_portB[11] = 1'b0;
end 
// in_portB[ 10 ]
initial
begin
	in_portB[10] = 1'b0;
end 
// in_portB[ 9 ]
initial
begin
	in_portB[9] = 1'b0;
end 
// in_portB[ 8 ]
initial
begin
	in_portB[8] = 1'b0;
end 
// in_portB[ 7 ]
initial
begin
	in_portB[7] = 1'b0;
end 
// in_portB[ 6 ]
initial
begin
	in_portB[6] = 1'b0;
end 
// in_portB[ 5 ]
initial
begin
	in_portB[5] = 1'b0;
end 
// in_portB[ 4 ]
initial
begin
	in_portB[4] = 1'b0;
end 
// in_portB[ 3 ]
initial
begin
	in_portB[3] = 1'b0;
	in_portB[3] = #525000 1'b1;
end 
// in_portB[ 2 ]
initial
begin
	in_portB[2] = 1'b0;
	in_portB[2] = #225000 1'b1;
	in_portB[2] = #300000 1'b0;
	in_portB[2] = #300000 1'b1;
end 
// in_portB[ 1 ]
initial
begin
	in_portB[1] = 1'b0;
	# 75000;
	repeat(3)
	begin
		in_portB[1] = 1'b1;
		in_portB[1] = #150000 1'b0;
		# 150000;
	end
	in_portB[1] = 1'b1;
end 
// in_portB[ 0 ]
initial
begin
	repeat(6)
	begin
		in_portB[0] = 1'b1;
		in_portB[0] = #75000 1'b0;
		# 75000;
	end
	in_portB[0] = 1'b1;
	in_portB[0] = #75000 1'b0;
end 
endmodule

